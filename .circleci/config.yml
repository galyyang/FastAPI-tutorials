version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/py

#workflows:
#  sample:  # This is the name of the workflow, feel free to change it to better match your workflow.
#    # Inside the workflow, you define the jobs you want to run.
#    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
#    jobs:
#      - build-and-test


jobs:
  build-and-test:  # This is the name of the job, feel free to change it to better match what you're trying to do!
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
#      - python/install-packages:
#          pkg-manager: pip
#          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
#          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Setup python venv
          command: |
            virtualenv -p python3.8 env
            echo "source ./env/bin/activate" >> $BASH_ENV
#            python3 -m venv venv
#            . venv/bin/activate
      - run:
          name: Install Dependencies
          command:
            pip install -r requirements.txt
      - run:
          name: Run tests
          command: pytest
      - run:
          name: Create Zip archive of depencencies
          command: |
            cd env/lib/python3.8/site-packages
            zip -r9 ../../../../function.zip .
      - run:
          name: App app to Zip archive
          command: |
            zip -g ./function.zip -r blog
            zip -g ./function.zip blog.db
      - persist_to_workspace:
          root: .
          paths:
            - function.zip

  deply-dev:
    executor: aws-cli/default
    steps:
      - attach_workspace:
          at: ./
      - aws-cli/setup:
          aws-region:AWS_DEFAULT_REGION
          aws-access-key-id:AWS_ACCESS_KEY_ID
          aws-secret-access-key:AWS_SECRET_ACCESS_KEY
      - run:
        - name: Upload to S3
          command: aws s3 cp function.zip s3://cicd-fastapi/function.zip
      - run:
          name: Deploy new Lambda
          command: aws lambda update-function-code --function-name serverless-fastapi-lamda --s3-bucket cicd-fastapi --s3-key function.zip


workloads:
  build-test-and-deploy:
    jobs:
      - build-and-test:
        context: cicd-fastapi
        filters:
          branches:
            only:
              -cicd

      - deploy-dev:
          context: cicd-fastapi
          requires:
            - build-and-test
          filters:
          branches:
            only:
              -cicd
